/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador1 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,9],$V2=[1,30],$V3=[1,7],$V4=[1,13],$V5=[1,12],$V6=[1,14],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[2,10,11,13,17,19,24,50,62,63,64,65],$Vd=[2,5,11,17,19,24,50,62,63,64,65],$Ve=[2,62],$Vf=[1,61],$Vg=[1,83],$Vh=[1,77],$Vi=[1,76],$Vj=[1,73],$Vk=[1,74],$Vl=[1,78],$Vm=[1,79],$Vn=[1,80],$Vo=[1,81],$Vp=[1,82],$Vq=[17,44],$Vr=[2,65],$Vs=[1,93],$Vt=[1,94],$Vu=[1,102],$Vv=[1,101],$Vw=[1,103],$Vx=[1,104],$Vy=[1,105],$Vz=[1,106],$VA=[1,107],$VB=[1,108],$VC=[1,109],$VD=[1,110],$VE=[1,111],$VF=[1,112],$VG=[1,113],$VH=[1,114],$VI=[1,115],$VJ=[1,116],$VK=[17,22,44,52,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$VL=[1,135],$VM=[22,44],$VN=[17,22,44,52,66,67],$VO=[17,22,44,52,66,67,68,70,71],$VP=[17,22,44,52,66,67,68,69,70,71,72,73,74,75],$VQ=[17,22,44,52,66,67,68,69,70,71,72,73,74,75,76,77,78];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"inicioCode":4,"EOF":5,"listaImportacion":6,"defIncerteza":7,"instrucciones":8,"importacion":9,"IMPORTAR":10,"ID":11,"EXTENCION_CRL":12,"INCERTEZA":13,"DECIMAL":14,"instruction":15,"instructionGlobal":16,"NUEVA_LINEA":17,"instruccionFuncionMetodo":18,"VOID":19,"PRINCIPAL":20,"(":21,")":22,":":23,"IDENTACION":24,"instruccionDeclarar":25,"instruccionAsignar":26,"llamarFuncion":27,"instruccionRetorno":28,"sentenciaSi":29,"sentenciaPara":30,"sentenciaMientras":31,"sentenciaDetener":32,"sentenciaContinuar":33,"funcionMostrar":34,"funcionDibujarAST":35,"funcionDibujarExp":36,"funcionDibujarTs":37,"DIBUJAR_TS":38,"DIBUJAR_EXP":39,"exprecion":40,"DIBUJAR_AST":41,"identificador":42,"MOSTRAR":43,",":44,"parametrosEnviar":45,"CONTINUAR":46,"DETENER":47,"MIENTRAS":48,"PARA":49,"INT":50,"=":51,";":52,"opPara":53,"++":54,"--":55,"SI":56,"SINO":57,"RETORNO":58,"tipoDato":59,"parametros":60,"listaIds":61,"STRING":62,"CHAR":63,"DOUBLE":64,"BOOLEAN":65,"-":66,"+":67,"/":68,"^":69,"*":70,"%":71,">":72,"<":73,">=":74,"<=":75,"!=":76,"==":77,"~":78,"||":79,"|&":80,"&&":81,"!":82,"f":83,"ENTERO":84,"CADENA":85,"CARACTER":86,"TRUE":87,"FALSE":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"IMPORTAR",11:"ID",12:"EXTENCION_CRL",13:"INCERTEZA",14:"DECIMAL",17:"NUEVA_LINEA",19:"VOID",20:"PRINCIPAL",21:"(",22:")",23:":",24:"IDENTACION",38:"DIBUJAR_TS",39:"DIBUJAR_EXP",41:"DIBUJAR_AST",42:"identificador",43:"MOSTRAR",44:",",46:"CONTINUAR",47:"DETENER",48:"MIENTRAS",49:"PARA",50:"INT",51:"=",52:";",54:"++",55:"--",56:"SI",57:"SINO",58:"RETORNO",62:"STRING",63:"CHAR",64:"DOUBLE",65:"BOOLEAN",66:"-",67:"+",68:"/",69:"^",70:"*",71:"%",72:">",73:"<",74:">=",75:"<=",76:"!=",77:"==",78:"~",79:"||",80:"|&",81:"&&",82:"!",84:"ENTERO",85:"CADENA",86:"CARACTER",87:"TRUE",88:"FALSE"},
productions_: [0,[3,2],[4,3],[4,2],[4,2],[4,1],[6,2],[6,1],[9,3],[7,2],[8,2],[8,1],[15,2],[15,2],[15,6],[15,1],[15,2],[15,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[37,4],[36,5],[35,5],[34,7],[34,5],[33,2],[32,2],[31,6],[30,13],[53,1],[53,1],[29,6],[29,3],[28,3],[27,5],[27,4],[45,3],[45,1],[18,6],[18,5],[60,4],[60,2],[26,3],[26,4],[25,3],[25,2],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[61,3],[61,5],[61,1],[61,3],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,1],[83,3],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,3],[83,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                                return respuestaAnalisis($$[$0-1]);
                            
break;
case 2:
this.$ = sumarArray($$[$0-2],$$[$0]);
break;
case 3:
this.$ = sumarArray($$[$0-1],$$[$0]);
break;
case 4: case 5:
this.$ = $$[$0];
break;
case 6:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1];
break;
case 7:
this.$ = [$$[$0]];
break;
case 8:
this.$ = new Importar($$[$0-1],_$[$0-2].first_line,(_$[$0-2].first_column+1));
break;
case 9:

                                            console.log("incerteza: "+$$[$0]);
                                            INCERTEZA_GLOBAL = Number($$[$0]);
                                        
break;
case 10:
this.$ = agregarInstrucciones($$[$0-1],$$[$0]);
break;
case 11:
this.$ = agregarInstrucciones([],$$[$0]);
break;
case 12: case 13:
this.$ = $$[$0-1];
break;
case 14:
this.$ = new Principal("",generarSentencias(_$[$0-4].first_line,(_$[$0-4].first_column+1)),_$[$0-4].first_line,(_$[$0-4].first_column+1));agregadoFuncion(this.$);
break;
case 17:
errorAnalisisCodigo(this,$$[$0]);
break;
case 31:
this.$ = new DrawTS(-1,-1,_$[$0-2].first_line,(_$[$0-2].first_column+1));agregarScope2($$[$0-3],this.$);addSimpleInst(this.$);
break;
case 32:
this.$ = new DrawEXP($$[$0-1],_$[$0-3].first_line,(_$[$0-3].first_column+1));agregarScope2($$[$0-4],this.$);addSimpleInst(this.$);
break;
case 33:
this.$ = new DrawAST($$[$0-1],_$[$0-3].first_line,(_$[$0-3].first_column+1));agregarScope2($$[$0-4],this.$);addSimpleInst(this.$);
break;
case 34:

                                                                                    //console.log("identacion mostrar");
                                                                                    this.$ = new Mostrar($$[$0-3],[],_$[$0-5].first_line,_$[$0-5].first_column);
                                                                                    agregarScope2($$[$0-6],this.$);
                                                                                    addSimpleInst(this.$);
                                                                                    //INSTRUCCIONES_RECUPERADAS.push(this.$);
                                                                                
break;
case 35:

                                                                //console.log("identacion mostrar");
                                                                this.$ = new Mostrar($$[$0-1],[],_$[$0-3].first_line,_$[$0-3].first_column);
                                                                agregarScope2($$[$0-4],this.$);
                                                                addSimpleInst(this.$);
                                                                //INSTRUCCIONES_RECUPERADAS.push(this.$);
                                                            
break;
case 36:
this.$ = new Continuar(_$[$0].first_line,(_$[$0].first_column+1));agregarScope2($$[$0-1],this.$);addSimpleInst(this.$);
break;
case 37:
this.$ = new Detener(_$[$0].first_line,(_$[$0].first_column+1));agregarScope2($$[$0-1],this.$);addSimpleInst(this.$);
break;
case 38:
   
                                                                        this.$ = new Mientras($$[$0-2],generarSentencias(_$[$0-4].first_line,(_$[$0-4].first_column+1)),_$[$0-4].first_line,(_$[$0-4].first_column+1));
                                                                        agregarScope2($$[$0-5],this.$);
                                                                        addIntruccionMientrasPara(this.$);
                                                                    
break;
case 39:

                                                                                                    this.$ = new Para($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-3],generarSentencias(_$[$0-11].first_line,(_$[$0-11].first_column+1)),_$[$0-11].first_line,(_$[$0-11].first_column+1));
                                                                                                    //console.log($$[$0-12].length);console.log(_$[$0-11].first_line);console.log(_$[$0-11].first_column);console.log($$[$0-8]);console.log($$[$0-6]);console.log($$[$0-4]);console.log($$[$0-3]);
                                                                                                    agregarScope2($$[$0-12],this.$);
                                                                                                    addIntruccionMientrasPara(this.$);
                                                                                                
break;
case 40:
this.$ = 0;
break;
case 41:
this.$ = 1;
break;
case 42:

                                                        this.$ = new Si($$[$0-2],generarSentencias(_$[$0-4].first_line,(_$[$0-4].first_column+1)),null,_$[$0-4].first_line,(_$[$0-4].first_column+1));
                                                        agregarScope2($$[$0-5],this.$);
                                                        addInstruccionSi(this.$);
                                                    
break;
case 43:

                                                        this.$ = new Sino(generarSentencias(_$[$0-1].first_line,(_$[$0-1].first_column+1)),_$[$0-1].first_line,(_$[$0-1].first_column+1));
                                                        agregarScope2($$[$0-2],this.$);
                                                        addInstruccionSi(this.$);
                                                    
break;
case 44:
this.$ = new Retornar($$[$0],_$[$0-1].first_line,(_$[$0-1].first_column+1));agregarScope2($$[$0-2],this.$);addSimpleInst(this.$);
break;
case 45:
this.$ = new CallFuncion($$[$0-3],$$[$0-1],_$[$0-3].first_line,(_$[$0-3].first_column+1));agregarScope2($$[$0-4],this.$);addSimpleInst(this.$);
break;
case 46:
this.$ = new CallFuncion($$[$0-2],[],_$[$0-2].first_line,(_$[$0-2].first_column+1));agregarScope2($$[$0-3],this.$);addSimpleInst(this.$);
break;
case 47:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 48:
this.$=[$$[$0]];
break;
case 49:
this.$ = new Funcion($$[$0-5],$$[$0-4],generarSentencias(_$[$0-4].first_line,(_$[$0-4].first_column+1)),$$[$0-2],_$[$0-4].first_line,(_$[$0-4].first_column+1));agregadoFuncion(this.$);
break;
case 50:
this.$ = new Funcion($$[$0-4],$$[$0-3],generarSentencias(_$[$0-3].first_line,(_$[$0-3].first_column+1)),[],_$[$0-3].first_line,(_$[$0-3].first_column+1));agregadoFuncion(this.$);
break;
case 51:
$$[$0-3].push(new Declaracion($$[$0],$$[$0-1],null,_$[$0].first_line,(_$[$0].first_column+1)));this.$ = $$[$0-3];
break;
case 52:
this.$=[new Declaracion($$[$0],$$[$0-1],null,_$[$0].first_line,(_$[$0].first_column+1))]
break;
case 53:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,(_$[$0-2].first_column+1));agregarScope2("",this.$);addSimpleInst(this.$);
break;
case 54:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,(_$[$0-2].first_column+1));agregarScope2($$[$0-3],this.$);addSimpleInst(this.$);
break;
case 55:
this.$ = $$[$0];agregarTipoDeclaracion($$[$0-1],this.$,$$[$0-2]);agregarScope2Declaraciones($$[$0-2],this.$);addSimpleInst(this.$);
break;
case 56:
this.$ = $$[$0];agregarTipoDeclaracion($$[$0-1],this.$,"");agregarScope2Declaraciones("",this.$);addSimpleInst(this.$);
break;
case 57:
this.$=Tipo.INT;
break;
case 58:
this.$=Tipo.STRING;
break;
case 59:
this.$=Tipo.CHAR;
break;
case 60:
this.$=Tipo.DOUBLE;
break;
case 61:
this.$=Tipo.BOOLEAN;
break;
case 62:
this.$=Tipo.VOID;
break;
case 63:

                                                    $$[$0-2].push(new Declaracion($$[$0],-1,null,_$[$0].first_line,(_$[$0].first_column+1)));
                                                    this.$ = $$[$0-2];
                                                
break;
case 64:

                                                    $$[$0-4].push(new Declaracion($$[$0-2],-1,$$[$0],_$[$0-2].first_line,(_$[$0-2].first_column+1)));
                                                    this.$ = $$[$0-4];
                                                
break;
case 65:

                                                    this.$ = [new Declaracion($$[$0],-1,null,_$[$0].first_line,(_$[$0].first_column+1))];
                                                
break;
case 66:

                                                    this.$ = [new Declaracion($$[$0-2],-1,$$[$0],_$[$0-2].first_line,(_$[$0-2].first_column+1))];
                                                
break;
case 67:
console.log("- uninus"); this.$ = new Operacion(new Literal("-1",_$[$0-1].first_line, (_$[$0-1].first_column+1),3),$$[$0],2,_$[$0-1].first_line, (_$[$0-1].first_column+1));
break;
case 68:
console.log("+"); this.$ = new Operacion($$[$0-2],$$[$0],0,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 69:
console.log("-"); this.$ = new Operacion($$[$0-2],$$[$0],1,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 70:
console.log("/"); this.$ = new Operacion($$[$0-2],$$[$0],3,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 71:
console.log("^"); this.$ = new Operacion($$[$0-2],$$[$0],5,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 72:
console.log("*"); this.$ = new Operacion($$[$0-2],$$[$0],2,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 73:
console.log("%"); this.$ = new Operacion($$[$0-2],$$[$0],4,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 74:
console.log(">"); this.$ = new Relacional($$[$0-2],$$[$0],3,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 75:
console.log("<"); this.$ = new Relacional($$[$0-2],$$[$0],2,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 76:
console.log(">="); this.$ = new Relacional($$[$0-2],$$[$0],5,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 77:
console.log("<="); this.$ = new Relacional($$[$0-2],$$[$0],4,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 78:
console.log("!="); this.$ = new Relacional($$[$0-2],$$[$0],1,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 79:
console.log("=="); this.$ = new Relacional($$[$0-2],$$[$0],0,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 80:
console.log("~"); this.$ = new Relacional($$[$0-2],$$[$0],6,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 81:
console.log("||"); this.$ = new Logica($$[$0-2],$$[$0],1,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 82:
console.log("|&"); this.$ = new Logica($$[$0-2],$$[$0],2,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 83:
console.log("&&"); this.$ = new Logica($$[$0-2],$$[$0],0,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 84:
console.log("!"); this.$ = new Logica($$[$0-1],$$[$01],3,_$[$0-1].first_line, (_$[$0-1].first_column+1));
break;
case 85:
this.$=$$[$0];
break;
case 86:
this.$=$$[$0-1];
break;
case 87:
this.$=new Literal($$[$0],_$[$0].first_line, (_$[$0].first_column+1),Tipo.DOUBLE);
break;
case 88:
this.$=new Literal($$[$0],_$[$0].first_line, (_$[$0].first_column+1),Tipo.INT);
break;
case 89:
this.$=new Literal($$[$0].replace(/\"/g,""),_$[$0].first_line, (_$[$0].first_column+1),Tipo.STRING);
break;
case 90:
this.$=new Literal($$[$0].replace(/\'/g,""),_$[$0].first_line, (_$[$0].first_column+1),Tipo.CHAR);
break;
case 91:
this.$=new Literal(true,_$[$0].first_line, (_$[$0].first_column+1),Tipo.BOOLEAN);
break;
case 92:
this.$=new Literal(false,_$[$0].first_line, (_$[$0].first_column+1),Tipo.BOOLEAN);
break;
case 93:
this.$=new Acceder($$[$0], _$[$0].first_line,(_$[$0].first_column+1));
break;
case 94:
this.$ = new ObtenerValFuncion($$[$0-2],[],_$[$0-2].first_line,(_$[$0-2].first_column+1));
break;
case 95:
this.$ = new ObtenerValFuncion($$[$0-3],$$[$0-1],_$[$0-3].first_line,(_$[$0-3].first_column+1));
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:$V1,11:$V2,13:$V3,15:8,16:10,17:$V4,18:11,19:$V5,24:$V6,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,50:$V7,59:29,62:$V8,63:$V9,64:$Va,65:$Vb},{1:[3]},{5:[1,36]},{2:$V0,7:37,8:38,9:39,10:$V1,11:$V2,13:$V3,15:8,16:10,17:$V4,18:11,19:$V5,24:$V6,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,50:$V7,59:29,62:$V8,63:$V9,64:$Va,65:$Vb},{2:$V0,8:40,11:$V2,15:8,16:10,17:$V4,18:11,19:$V5,24:$V6,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,50:$V7,59:29,62:$V8,63:$V9,64:$Va,65:$Vb},{2:$V0,5:[2,5],11:$V2,15:41,16:10,17:$V4,18:11,19:$V5,24:$V6,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,50:$V7,59:29,62:$V8,63:$V9,64:$Va,65:$Vb},o($Vc,[2,7]),{14:[1,42]},o($Vd,[2,11]),{11:[1,43]},{17:[1,44]},{17:[1,45]},{11:$Ve,20:[1,46]},o($Vd,[2,15]),{11:[1,49],17:[1,47],19:$Vf,38:[1,60],39:[1,59],41:[1,58],43:[1,57],46:[1,56],47:[1,55],48:[1,54],49:[1,53],50:$V7,56:[1,51],57:[1,52],58:[1,50],59:48,62:$V8,63:$V9,64:$Va,65:$Vb},o($Vd,[2,17]),{17:[2,18]},{17:[2,19]},{17:[2,20]},{17:[2,21]},{17:[2,22]},{17:[2,23]},{17:[2,24]},{17:[2,25]},{17:[2,26]},{17:[2,27]},{17:[2,28]},{17:[2,29]},{17:[2,30]},{11:[1,62],61:63},{51:[1,64]},{11:[2,57]},{11:[2,58]},{11:[2,59]},{11:[2,60]},{11:[2,61]},{1:[2,1]},{2:$V0,8:65,11:$V2,15:8,16:10,17:$V4,18:11,19:$V5,24:$V6,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,50:$V7,59:29,62:$V8,63:$V9,64:$Va,65:$Vb},{2:$V0,5:[2,3],11:$V2,15:41,16:10,17:$V4,18:11,19:$V5,24:$V6,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,50:$V7,59:29,62:$V8,63:$V9,64:$Va,65:$Vb},o($Vc,[2,6]),{2:$V0,5:[2,4],11:$V2,15:41,16:10,17:$V4,18:11,19:$V5,24:$V6,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,50:$V7,59:29,62:$V8,63:$V9,64:$Va,65:$Vb},o($Vd,[2,10]),o([2,11,17,19,24,50,62,63,64,65],[2,9]),{12:[1,66]},o($Vd,[2,12]),o($Vd,[2,13]),{21:[1,67]},o($Vd,[2,16]),{11:[1,69],61:68},{21:[1,71],51:[1,70]},{11:$Vg,14:$Vh,21:$Vi,40:72,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{21:[1,84]},{23:[1,85]},{21:[1,86]},{21:[1,87]},{17:[2,37]},{17:[2,36]},{21:[1,88]},{21:[1,89]},{21:[1,90]},{21:[1,91]},{11:$Ve},o($Vq,$Vr,{21:[1,92],51:$Vs}),{17:[2,56],44:$Vt},{11:$Vg,14:$Vh,21:$Vi,40:95,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{2:$V0,5:[2,2],11:$V2,15:41,16:10,17:$V4,18:11,19:$V5,24:$V6,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,50:$V7,59:29,62:$V8,63:$V9,64:$Va,65:$Vb},o($Vc,[2,8]),{22:[1,96]},{17:[2,55],44:$Vt},o($Vq,$Vr,{51:$Vs}),{11:$Vg,14:$Vh,21:$Vi,40:97,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,22:[1,99],40:100,45:98,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{17:[2,44],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{11:$Vg,14:$Vh,21:$Vi,40:117,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:118,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},o($VK,[2,85]),{11:$Vg,14:$Vh,21:$Vi,40:119,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},o($VK,[2,87]),o($VK,[2,88]),o($VK,[2,89]),o($VK,[2,90]),o($VK,[2,91]),o($VK,[2,92]),o($VK,[2,93],{21:[1,120]}),{11:$Vg,14:$Vh,21:$Vi,40:121,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{17:[2,43]},{50:[1,122]},{11:$Vg,14:$Vh,21:$Vi,40:123,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:124,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{42:[1,125]},{11:$Vg,14:$Vh,21:$Vi,40:126,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{22:[1,127]},{19:$Vf,22:[1,129],50:$V7,59:130,60:128,62:$V8,63:$V9,64:$Va,65:$Vb},{11:$Vg,14:$Vh,21:$Vi,40:131,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:[1,132]},{17:[2,53],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{23:[1,133]},{17:[2,54],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{22:[1,134],44:$VL},{17:[2,46]},o($VM,[2,48],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),{11:$Vg,14:$Vh,21:$Vi,40:136,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:137,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:138,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:139,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:140,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:141,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:142,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:143,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:144,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:145,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:146,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:147,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:148,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:149,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:150,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{11:$Vg,14:$Vh,21:$Vi,40:151,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},o($VK,[2,67]),o($VK,[2,84]),{22:[1,152],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{11:$Vg,14:$Vh,21:$Vi,22:[1,153],40:100,45:154,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{22:[1,155],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{11:[1,156]},{22:[1,157],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{22:[1,159],44:[1,158],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{22:[1,160]},{22:[1,161],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{17:[2,31]},{22:[1,162],44:[1,163]},{23:[1,164]},{11:[1,165]},o($Vq,[2,66],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($Vq,[2,63],{51:[1,166]}),{17:[1,167]},{17:[2,45]},{11:$Vg,14:$Vh,21:$Vi,40:168,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},o($VN,[2,68],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VN,[2,69],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VO,[2,70],{69:$Vx,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VO,[2,71],{69:$Vx,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VO,[2,72],{69:$Vx,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VO,[2,73],{69:$Vx,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VP,[2,74],{76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VP,[2,75],{76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VP,[2,76],{76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VP,[2,77],{76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VQ,[2,78],{79:$VH,80:$VI,81:$VJ}),o($VQ,[2,79],{79:$VH,80:$VI,81:$VJ}),o($VQ,[2,80],{79:$VH,80:$VI,81:$VJ}),o([17,22,44,52,66,67,68,69,70,71,72,73,74,75,76,77,78,79],[2,81],{80:$VI,81:$VJ}),o([17,22,44,52,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],[2,82],{81:$VJ}),o($VK,[2,83]),o($VK,[2,86]),o($VK,[2,94]),{22:[1,169],44:$VL},{23:[1,170]},{51:[1,171]},{23:[1,172]},{11:$Vg,14:$Vh,21:$Vi,40:100,45:173,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{17:[2,35]},{17:[2,33]},{17:[2,32]},{23:[1,174]},{19:$Vf,50:$V7,59:175,62:$V8,63:$V9,64:$Va,65:$Vb},{17:[2,50]},o($VM,[2,52]),{11:$Vg,14:$Vh,21:$Vi,40:176,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},o($Vd,[2,14]),o($VM,[2,47],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VK,[2,95]),{17:[2,42]},{11:$Vg,14:$Vh,21:$Vi,40:177,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{17:[2,38]},{22:[1,178],44:$VL},{17:[2,49]},{11:[1,179]},o($Vq,[2,64],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),{52:[1,180],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{17:[2,34]},o($VM,[2,51]),{11:$Vg,14:$Vh,21:$Vi,40:181,66:$Vj,82:$Vk,83:75,84:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp},{52:[1,182],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{53:183,54:[1,184],55:[1,185]},{22:[1,186]},{22:[2,40]},{22:[2,41]},{23:[1,187]},{17:[2,39]}],
defaultActions: {16:[2,18],17:[2,19],18:[2,20],19:[2,21],20:[2,22],21:[2,23],22:[2,24],23:[2,25],24:[2,26],25:[2,27],26:[2,28],27:[2,29],28:[2,30],31:[2,57],32:[2,58],33:[2,59],34:[2,60],35:[2,61],36:[2,1],55:[2,37],56:[2,36],61:[2,62],85:[2,43],99:[2,46],127:[2,31],134:[2,45],159:[2,35],160:[2,33],161:[2,32],164:[2,50],170:[2,42],172:[2,38],174:[2,49],178:[2,34],184:[2,40],185:[2,41],187:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo insertado
    const {StringBuilder} = require('./../Strings/StringBuilder');
    const {Declaracion} = require('./../Instrucciones/Declaracion.ts');
    const {Funcion} = require('./../Instrucciones/Funcion.ts');
    const {CallFuncion} = require('./../Instrucciones/CallFuncion.ts');
    const {Mientras} = require('./../Instrucciones/Mientras.ts');
    const {Mostrar} = require('./../Instrucciones/Mostrar.ts');
    const {Retornar} = require('./../Instrucciones/Retornar.ts');
    const {Sentencias} = require('./../Instrucciones/Sentencias.ts');
    const {Para} = require('./../Instrucciones/Para.ts');
    const {Si} = require('./../Instrucciones/Si.ts');
    const {Sino} = require('./../Instrucciones/Sino.ts');
    const {Asignacion} = require('./../Instrucciones/Asignacion.ts');
    const {Detener} = require('./../Instrucciones/Detener.ts');
    const {Continuar} = require('./../Instrucciones/Continuar.ts');
    const {Importar} = require('./../Instrucciones/Importar.ts');

    const {DrawAST} = require('./../Instrucciones/DrawAST.ts');
    const {DrawEXP} = require('./../Instrucciones/DrawEXP.ts');
    const {DrawTS} = require('./../Instrucciones/DrawTS.ts');
    
    const {Principal} = require('./../Instrucciones/Principal.ts');

    const {Acceder} = require ('./../Expresion/Acceder.ts');
    const {Literal} = require ('./../Expresion/Literal.ts');
    const {Logica} = require ('./../Expresion/Logica.ts');
    const {Operacion} = require ('./../Expresion/Operacion.ts');
    const {Relacional} = require ('./../Expresion/Relacional.ts');
    const {ObtenerValFuncion} = require ('./../Expresion/ObtenerValFuncion.ts');
    
    
    
    const {Result} = require ('./../Result/Result.ts');

    const {Tipo}= require ('./../Abstracto/Retorno.ts');


    const {Pila}= require ('./../EDD/Pila.ts');


    //const {ConsolaCRLComponent} = require('./../../consola-crl/consola-crl.component.ts');

    let INCERTEZA_GLOBAL = 0.5;
    //let RESULT_STRING_LEC = new StringBuilder();
    let ERRORES_ANALISIS=[];

    let SENTENCIAS_GENERADAS = [];
    let VARIABLES_GLOBALES = [];

    let PILA_ANALISIS_SI = new Pila();


    let MEMORIA_PRINCIPAL = new Pila();
    let OBJ_MOSTRAR = [];



    function errorAnalisisCodigo(element,er){
        //console.log("Error sintactico: "+er+" en la liena: "+element._$.first_line+" ,en la columna: "+(element._$.first_column+1)+" ,Esperados: "+element._$);
        let tmp = "Error sintactico: \""+er+"\" ,Linea: "+element._$.first_line+" ,Columna: "+(element._$.first_column+1);
        console.log(tmp);
        ERRORES_ANALISIS.push(tmp);
    }

    function agregarTipoDeclaracion(tipo,elementos,identacion){
        //console.log('Tipo: '+tipo);
        //console.log('Identacion: '+identacion.length);
        //console.log('Elementos: '+elementos);
        elementos.forEach(element => {
            element.setTipo(tipo);
            //console.log(element);
        });
    }

    function agregarScope2Declaraciones(identacion,instr){
        //console.log("Identacion agregar: "+identacion.length);
        //console.log(instr);
        instr.forEach(ele=>{
            ele.setScope2(identacion.length);
        });
    }

    function agregarScope2(identacion,instr){
        //console.log("Identacion agregar: "+identacion.length);
        //console.log(instr);
        instr.setScope2(identacion.length);
    }

    function agregarInstrucciones(instrucciones,elemento){
        if(Array.isArray(elemento)){
            elemento.forEach(ele=>{
                instrucciones.push(ele);
            });
        }else{
            instrucciones.push(elemento);
        }

        return instrucciones
    }

    function sumarArray(imports,instrucciones){
        return imports.concat(instrucciones);
    }

    function agregadoFuncion(funcion){
        MEMORIA_PRINCIPAL.push(funcion);
    }

    function addInstruccionSi(si){
        if(MEMORIA_PRINCIPAL.size() == 0){
            let tmp = "Error Semantico: \"Si\" ,Linea: "+si.linea+" ,Columna: "+si.columna+"-> La instruccion solo puede estar dentro de una funcion o metodo";
            ERRORES_ANALISIS.push(tmp);
        }else{
            let ident = MEMORIA_PRINCIPAL.peek().getScope2();
            if(si.getScope2() == 0){
                console.log("Debuj al sacar elemento de la pila if");
                let tmp = "Error Semantico: \"Si\" ,Linea: "+si.linea+" ,Columna: "+si.columna+"-> La instruccion esta mal identada, la identacion esperada: "+ident+" - "+(ident+1);
                ERRORES_ANALISIS.push(tmp);
            }else{
                if(si instanceof Si){
                    if(((si.getScope2()-1) == ident)||(si.getScope2()==ident)){
                        MEMORIA_PRINCIPAL.push(si);
                        PILA_ANALISIS_SI.push(si);
                    }else if(si.getScope2() < ident){
                        let scopePadre = MEMORIA_PRINCIPAL.peek().getScope2();
                        console.log("Scope padre actual: "+scopePadre);
                        console.log("La instruccion Linea: "+si.linea+" ,Columna: "+si.columna+" no pertenece al scope");
                        let tmp = [];
                        while(scopePadre == MEMORIA_PRINCIPAL.peek().getScope2()){
                            tmp.push(MEMORIA_PRINCIPAL.pop());
                        }
                        console.log("Intrucciones recuperadas: ");
                        let recuperacion = tmp.reverse();
                        console.log(recuperacion);
                        recuperacion.forEach(ele=>{MEMORIA_PRINCIPAL.peek().agregar(ele);});
                        console.log("Memoria actual:")
                        MEMORIA_PRINCIPAL.print();
                        addInstruccionSi(si);
                    }else{
                        let tmp = "Error Semantico: \"Si\" ,Linea: "+si.linea+" ,Columna: "+si.columna+"-> La instruccion esta mal identada, la identacion esperada: "+ident+" - "+(ident+1);
                        ERRORES_ANALISIS.push(tmp);
                    }
                }else if(si instanceof Sino){
                    if(PILA_ANALISIS_SI.size() != 0 ){
                        let siTmp = PILA_ANALISIS_SI.peek();
                        if(si.getScope2() == siTmp.getScope2()){
                            MEMORIA_PRINCIPAL.push(si);
                            PILA_ANALISIS_SI.pop().setCodeFalse(si.getCodeFalse());
                        }else if(si.getScope2() < siTmp.getScope2()){
                            //Verificacion de que haya un si que tenga la misma identacion y en base a eso hacer el algoritmo de ir hacia atras
                            let array = PILA_ANALISIS_SI.getArray();
                            let bandera = false;
                            array.forEach(s=>{
                                if(si.getScope2() == s.getScope2()){
                                    bandera = true;
                                }
                            });
                            if(bandera){
                                if(si.getScope2() < ident){
                                    PILA_ANALISIS_SI.pop();
                                    let scopePadre = MEMORIA_PRINCIPAL.peek().getScope2();
                                    console.log("Scope padre actual: "+scopePadre);
                                    console.log("La instruccion Linea: "+si.linea+" ,Columna: "+si.columna+" no pertenece al scope");
                                    let tmp = [];
                                    while(scopePadre == MEMORIA_PRINCIPAL.peek().getScope2()){
                                        tmp.push(MEMORIA_PRINCIPAL.pop());
                                    }
                                    console.log("Intrucciones recuperadas: ");
                                    let recuperacion = tmp.reverse();
                                    console.log(recuperacion);
                                    recuperacion.forEach(ele=>{MEMORIA_PRINCIPAL.peek().agregar(ele);});
                                    console.log("Memoria actual:");
                                    MEMORIA_PRINCIPAL.print();
                                    addInstruccionSi(si);
                                }else{
                                    console.log("debuj1");
                                    let tmp = "Error Semantico: \"Sino\" ,Linea: "+si.linea+" ,Columna: "+si.columna+"-> La identacion de la intruccion es incorrecta se esperaba: "+ident+" - "(ident+1);
                                    ERRORES_ANALISIS.push(tmp);    
                                }                                
                            }else{
                                console.log("debuj2");
                                let tmp = "Error Semantico: \"Sino\" ,Linea: "+si.linea+" ,Columna: "+si.columna+"-> La intruccion necesita de la precedencia de la instruccion Si";
                                ERRORES_ANALISIS.push(tmp);
                            }
                        }else{
                            console.log("debuj3");
                            let tmp = "Error Semantico: \"Sino\" ,Linea: "+si.linea+" ,Columna: "+si.columna+"-> La intruccion necesita de la precedencia de la instruccion Si";
                            ERRORES_ANALISIS.push(tmp);
                        }
                    }else{
                        console.log("debuj4");
                        let tmp = "Error Semantico: \"Sino\" ,Linea: "+si.linea+" ,Columna: "+si.columna+"-> La intruccion necesita de la precedencia de la instruccion Si";
                        ERRORES_ANALISIS.push(tmp);
                    }
                }else{
                    console.log("Se utilizo la funcion incorrecta -> Linea: "+si.linea+" ,Columna: "+si.columna);
                }
            }
        }
    }

    function addIntruccionMientrasPara(instr){
        let tipo = "undefined";
        if(instr instanceof Para){
            tipo = "Para";
        }else if( instr instanceof Mientras){
            tipo = "Mientras";
        }
        if(MEMORIA_PRINCIPAL.size()==0){
            let tmp = "Error Semantico: \""+tipo+"\" ,Linea: "+instr.linea+" ,Columna: "+instr.columna+"-> La instruccion solo puede estar dentro de una funcion o metodo";
            ERRORES_ANALISIS.push(tmp);
        }else{
            let ident = MEMORIA_PRINCIPAL.peek().getScope2();
            if(instr.getScope2() == 0){
                let tmp = "Error Semantico: \""+tipo+"\" ,Linea: "+instr.linea+" ,Columna: "+instr.columna+"-> La instruccion esta mal identada, la identacion esperada: "+ident+" - "+(ident+1);
                ERRORES_ANALISIS.push(tmp);
            }else{
                if(((instr.getScope2()-1) == ident)||(instr.getScope2()==ident)){
                    MEMORIA_PRINCIPAL.push(instr);
                }else if(instr.getScope2() < ident){
                    let scopePadre = MEMORIA_PRINCIPAL.peek().getScope2();
                    console.log("Scope padre actual: "+scopePadre);
                    console.log("La instruccion Linea: "+instr.linea+" ,Columna: "+instr.columna+" no pertenece al scope");
                    let tmp = [];
                    while(scopePadre==MEMORIA_PRINCIPAL.peek().getScope2()){
                        tmp.push(MEMORIA_PRINCIPAL.pop());
                    }
                    console.log("Instrucciones recuperadas");
                    let recuperacion = tmp.reverse();
                    console.log(recuperacion);
                    recuperacion.forEach(ele=>{MEMORIA_PRINCIPAL.peek().agregar(ele);});
                    console.log("Memoria actual: ");
                    MEMORIA_PRINCIPAL.print();
                    addIntruccionMientrasPara(instr);
                }else{
                    let tmp = "Error Semantico: \""+tipo+"\" ,Linea: "+instr.linea+" ,Columna: "+instr.columna+"-> La instruccion esta mal identada, la identacion esperada: "+ident+" - "+(ident+1);
                    ERRORES_ANALISIS.push(tmp);
                    //TODO: verificar si es necesario meter la instruccion en la pila
                }
            }
        }
    }

    function addSimpleInst(instruccion){
        if(Array.isArray(instruccion)){
            if(MEMORIA_PRINCIPAL.size() == 0){
                if(instruccion[0].getScope2() == 0){
                    intruccion.forEach(ele=>{
                        VARIABLES_GLOBALES.push(ele);
                    });
                }else{
                    let tmp = "Error Semantico: Linea: "+instruccion.linea+" ,Columna: "+instruccion.columna+"-> No se esperaba una identacion";
                    ERRORES_ANALISIS.push(tmp);
                }
            }else{
                let ident = MEMORIA_PRINCIPAL.peek().getScope2();
                if(instruccion[0].getScope2() == 0){
                    let tmp = "Error Semantico Linea: "+instruccion.linea+" ,Columna: "+instruccion.columna+"-> La instruccion solo puede estar dentro de una funcion o metodo";
                    ERRORES_ANALISIS.push(tmp);
                }else{
                    if(instruccion[0].getScope2() == (ident+1)){
                        instruccion.forEach(ele=>{
                            MEMORIA_PRINCIPAL.peek().agregar(ele);
                        });
                    }else if (instruccion[0].getScope2() <= (ident+1)){
                        let scopePadre = MEMORIA_PRINCIPAL.peek().getScope2();
                        console.log("Scope padre actual: "+scopePadre);
                        console.log("La instruccion Linea: "+instruccion[0].linea+" ,Columna: "+instruccion[0].columna+" no pertenece al scope");
                        let tmp2 = [];
                        while(scopePadre==MEMORIA_PRINCIPAL.peek().getScope2()){
                            tmp2.push(MEMORIA_PRINCIPAL.pop());
                        }
                        console.log("Intrucciones recuperadas: ");
                        let recuperacion = tmp2.reverse();
                        console.log(recuperacion);
                        recuperacion.forEach(ele=>{MEMORIA_PRINCIPAL.peek().agregar(ele);});
                        console.log("Memoria actual:");
                        MEMORIA_PRINCIPAL.print();
                        addSimpleInst(instruccion);
                    }else{
                        let tmp = "Error Semantico: Linea: "+instruccion[0].linea+" ,Columna: "+instruccion[0].columna+"-> La instruccion esta mal identada, la identacion esperada: "+ident+" - "+(ident+1);
                        ERRORES_ANALISIS.push(tmp);
                    }
                }
            }            
        }else{
            if(MEMORIA_PRINCIPAL.size()==0){
                let tmp = "Error Semantico: Linea: "+instruccion.linea+" ,Columna: "+instruccion.columna+"-> La instruccion solo puede estar dentro de una funcion o metodo";
                ERRORES_ANALISIS.push(tmp);
            }else{
                let ident = MEMORIA_PRINCIPAL.peek().getScope2();
                if(instruccion.getScope2() == 0){
                    let tmp = "Error Semantico Linea: "+instruccion.linea+" ,Columna: "+instruccion.columna+"-> La instruccion esta mal identada, la identacion esperada: "+ident+" - "+(ident+1);
                    ERRORES_ANALISIS.push(tmp); 
                }else{
                    if(instruccion.getScope2() == (ident+1)){
                        MEMORIA_PRINCIPAL.peek().agregar(instruccion);
                    }else if(instruccion.getScope2()<=ident){
                        let scopePadre = MEMORIA_PRINCIPAL.peek().getScope2();
                        console.log("Scope padre actual: "+scopePadre);
                        console.log("La instruccion Linea: "+instruccion.linea+" ,Columna: "+instruccion.columna+" no pertenece al scope");
                        let tmp2 = [];
                        while(scopePadre==MEMORIA_PRINCIPAL.peek().getScope2()){
                            tmp2.push(MEMORIA_PRINCIPAL.pop());
                        }
                        console.log("Intrucciones recuperadas: ");
                        let recuperacion = tmp2.reverse();
                        console.log(recuperacion);
                        recuperacion.forEach(ele=>{MEMORIA_PRINCIPAL.peek().agregar(ele);});
                        console.log("Memoria actual:");
                        MEMORIA_PRINCIPAL.print();
                        addSimpleInst(instruccion);
                    }else{
                        let tmp = "Error Semantico: Linea: "+instruccion.linea+" ,Columna: "+instruccion.columna+"-> La instruccion esta mal identada, la identacion esperada: "+ident+" - "+(ident+1);
                        ERRORES_ANALISIS.push(tmp);
                    }
                }
            }
        }
    }

    function generarSentencias(linea,columna){
        let result = new Sentencias([],linea,columna);
        SENTENCIAS_GENERADAS.push(result);
        return result;
    }
    
    function respuestaAnalisis(lista){
        INCERTEZA_GLOBAL = 0.5;
        
        let errorTemp = ERRORES_ANALISIS;
        let sentences = SENTENCIAS_GENERADAS;
        let mostra = OBJ_MOSTRAR;
        let varGlobales= VARIABLES_GLOBALES;

        MEMORIA_PRINCIPAL.clear();
        PILA_ANALISIS_SI.clear();
        ERRORES_ANALISIS = [];
        SENTENCIAS_GENERADAS = [];
        OBJ_MOSTRAR = [];
        VARIABLES_GLOBALES = [];

        return new Result(lista,errorTemp,sentences,mostra,varGlobales);
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ingonorar un comentario simple*/
break;
case 1:
                        return 17;
                    
break;
case 2:
                        //console.log('Identacion');
                        return 24;
                    
break;
case 3:
                        return 17;
                    
break;
case 4:
                        /*ingnorado*/
                    
break;
case 5:return 84;
break;
case 6:return 14;
break;
case 7:return 85;
break;
case 8:return 86;
break;
case 9:return 12;
break;
case 10:return 70;
break;
case 11:return 68;
break;
case 12:return 71;
break;
case 13:return 69;
break;
case 14:return 52;
break;
case 15:return 23;
break;
case 16:return 44;
break;
case 17:return 54;
break;
case 18:return 55;
break;
case 19:return 66;
break;
case 20:return 67;
break;
case 21:return 75;
break;
case 22:return 74;
break;
case 23:return 77;
break;
case 24:return 76;
break;
case 25:return 79;
break;
case 26:return 80;
break;
case 27:return 81;
break;
case 28:return 82;
break;
case 29:return 73;
break;
case 30:return 72;
break;
case 31:return 51;
break;
case 32:return 78;
break;
case 33:return 21;
break;
case 34:return 22;
break;
case 35:return 64;
break;
case 36:return 65;
break;
case 37:return 62;
break;
case 38:return 50;
break;
case 39:return 63;
break;
case 40:return 19;
break;
case 41:return 87;
break;
case 42:return 88;
break;
case 43:return 56;
break;
case 44:return 57;
break;
case 45:return 49;
break;
case 46:return 48;
break;
case 47:return 47;
break;
case 48:return 46;
break;
case 49:return 58;
break;
case 50:return 43;
break;
case 51:return 10;
break;
case 52:return 13;
break;
case 53:return 41;
break;
case 54:return 39;
break;
case 55:return 38;
break;
case 56:return 20;
break;
case 57:return 11;
break;
case 58:return 5;
break;
case 59:console.log('Se encontro un error lexico:'+ yy_.yytext);
break;
}
},
rules: [/^(?:(((!!)([^\n]*))))/,/^(?:\t+\n)/,/^(?:\t+)/,/^(?:\n)/,/^(?:\s)/,/^(?:[0-9]+)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:("[^"]*"))/,/^(?:('[^"]'))/,/^(?:\.crl\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:&&)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:\()/,/^(?:\))/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Retorno\b)/,/^(?:Mostrar\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:Principal\b)/,/^(?:(([a-zA-Z_$]([a-zA-Z_$]|[0-9])*)))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador1;
exports.Parser = analizador1.Parser;
exports.parse = function () { return analizador1.parse.apply(analizador1, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}