/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador1 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,9],$V2=[1,29],$V3=[1,7],$V4=[1,12],$V5=[1,28],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[2,10,11,13,18,36,49,61,62,63,64],$Vc=[2,5,11,18,36,49,61,62,63,64],$Vd=[2,60],$Ve=[1,59],$Vf=[2,5,11,18,36,43,49,61,62,63,64],$Vg=[2,63],$Vh=[1,65],$Vi=[1,66],$Vj=[1,80],$Vk=[1,75],$Vl=[1,74],$Vm=[1,72],$Vn=[1,76],$Vo=[1,77],$Vp=[1,78],$Vq=[1,79],$Vr=[1,100],$Vs=[1,101],$Vt=[1,102],$Vu=[1,103],$Vv=[1,104],$Vw=[1,105],$Vx=[1,106],$Vy=[1,107],$Vz=[1,108],$VA=[1,109],$VB=[1,110],$VC=[1,111],$VD=[1,112],$VE=[1,113],$VF=[1,114],$VG=[1,115],$VH=[2,5,11,18,21,36,43,49,51,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],$VI=[1,133],$VJ=[21,43],$VK=[2,5,11,18,21,36,43,49,51,61,62,63,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80],$VL=[2,5,11,18,21,36,43,49,51,61,62,63,64,71,72,73,74,75,76,77,78,79,80],$VM=[2,5,11,18,21,36,43,49,51,61,62,63,64,75,76,77,78,79,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"inicioCode":4,"EOF":5,"listaImportacion":6,"defIncerteza":7,"instrucciones":8,"importacion":9,"IMPORTAR":10,"ID":11,"EXTENCION_CRL":12,"INCERTEZA":13,"DECIMAL":14,"instruction":15,"instructionGlobal":16,"instruccionFuncionMetodo":17,"VOID":18,"PRINCIPAL":19,"(":20,")":21,":":22,"instruccionDeclarar":23,"instruccionAsignar":24,"llamarFuncion":25,"instruccionRetorno":26,"sentenciaSi":27,"sentenciaPara":28,"sentenciaMientras":29,"sentenciaDetener":30,"sentenciaContinuar":31,"funcionMostrar":32,"funcionDibujarAST":33,"funcionDibujarExp":34,"funcionDibujarTs":35,"IDENTACION":36,"DIBUJAR_TS":37,"DIBUJAR_EXP":38,"exprecion":39,"DIBUJAR_AST":40,"identificador":41,"MOSTRAR":42,",":43,"parametrosEnviar":44,"CONTINUAR":45,"DETENER":46,"MIENTRAS":47,"PARA":48,"INT":49,"=":50,";":51,"opPara":52,"++":53,"--":54,"SI":55,"SINO":56,"RETORNO":57,"tipoDato":58,"parametros":59,"listaIds":60,"STRING":61,"CHAR":62,"DOUBLE":63,"BOOLEAN":64,"+":65,"-":66,"/":67,"^":68,"*":69,"%":70,">":71,"<":72,">=":73,"<=":74,"!=":75,"==":76,"~":77,"||":78,"|&":79,"&&":80,"!":81,"f":82,"ENTERO":83,"CADENA":84,"TRUE":85,"FALSE":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"IMPORTAR",11:"ID",12:"EXTENCION_CRL",13:"INCERTEZA",14:"DECIMAL",18:"VOID",19:"PRINCIPAL",20:"(",21:")",22:":",36:"IDENTACION",37:"DIBUJAR_TS",38:"DIBUJAR_EXP",40:"DIBUJAR_AST",41:"identificador",42:"MOSTRAR",43:",",45:"CONTINUAR",46:"DETENER",47:"MIENTRAS",48:"PARA",49:"INT",50:"=",51:";",53:"++",54:"--",55:"SI",56:"SINO",57:"RETORNO",61:"STRING",62:"CHAR",63:"DOUBLE",64:"BOOLEAN",65:"+",66:"-",67:"/",68:"^",69:"*",70:"%",71:">",72:"<",73:">=",74:"<=",75:"!=",76:"==",77:"~",78:"||",79:"|&",80:"&&",81:"!",83:"ENTERO",84:"CADENA",85:"TRUE",86:"FALSE"},
productions_: [0,[3,2],[4,3],[4,2],[4,2],[4,1],[6,2],[6,1],[9,3],[7,2],[8,2],[8,1],[15,1],[15,1],[15,5],[15,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[35,4],[34,5],[33,5],[32,7],[32,5],[31,2],[30,2],[29,6],[28,13],[52,1],[52,1],[27,6],[27,3],[26,3],[25,5],[25,4],[44,3],[44,1],[17,6],[17,5],[59,4],[59,2],[24,3],[24,4],[23,3],[23,2],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[60,3],[60,5],[60,1],[60,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,1],[82,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,3],[82,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                                console.log("Inicio del analisi");
                                return INSTRUCCIONES_RECUPERADAS;
                            
break;
case 8:
console.log($$[$0-2] + "Archivo: "+$$[$0-1]);
break;
case 9:

                                            console.log("incerteza: "+$$[$0]);
                                            INCERTEZA_GLOBAL = Number($$[$0]);
                                        
break;
case 14:
console.log("void principal");
break;
case 15:
errorAnalisisCodigo(this,$$[$0]);
break;
case 29:
console.log("identacion TS");
break;
case 30:
console.log("identacion EXP");
break;
case 31:
console.log("identacion AST");
break;
case 32:

                                                                                    //console.log("identacion mostrar");
                                                                                    this.$ = new Mostrar($$[$0-3],[],_$[$0-5].first_line,_$[$0-5].first_column);
                                                                                    INSTRUCCIONES_RECUPERADAS.push(this.$);
                                                                                
break;
case 33:

                                                                //console.log("identacion mostrar");
                                                                this.$ = new Mostrar($$[$0-1],[],_$[$0-3].first_line,_$[$0-3].first_column);
                                                                INSTRUCCIONES_RECUPERADAS.push(this.$);
                                                            
break;
case 34:
this.$ = new Continuar(_$[$0].first_line,(_$[$0].first_column+1));agregarScope2($$[$0-1],this.$);
break;
case 35:
this.$ = new Detener(_$[$0].first_line,(_$[$0].first_column+1));agregarScope2($$[$0-1],this.$);
break;
case 36:
this.$ = new Mientras($$[$0-2],null,_$[$0-4].first_line,(_$[$0-4].first_column+1));agregarScope2($$[$0-5],this.$);
break;
case 37:
this.$ = new Para($$[$0-8],$$[$0-6].$$[$0-4],$$[$0-2],null,_$[$0-11].first_line,(_$[$0-11].first_column+1));agregarScope2($$[$0-12],this.$);
break;
case 38:
this.$ = 0;
break;
case 39:
this.$ = 1;
break;
case 40:
this.$ = new Si($$[$0-2],null,null,_$[$0-4].first_line,(_$[$0-4].first_column+1));agregarScope2($$[$0-5],this.$);
break;
case 41:
this.$ = new Sino(null,_$[$0-1].first_line,(_$[$0-1].first_column+1));agregarScope2($$[$0-2],this.$);
break;
case 42:
this.$ = new Retorno($$[$0],_$[$0-1].first_line,(_$[$0-1].first_column+1));agregarScope2($$[$0-2],this.$);
break;
case 43:
console.log("identacion funcion parametros");
break;
case 44:
console.log("identacion funcion");
break;
case 47:
console.log("declaracion metodo parametros");
break;
case 48:
console.log("declaracion metodo vacio");
break;
case 51:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,(_$[$0-2].first_column+1));agregarScope2("",this.$);
break;
case 52:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,(_$[$0-2].first_column+1));agregarScope2($$[$0-3],this.$);
break;
case 53:
agregarTipoDeclaracion($$[$0-1],$$[$0],$$[$0-2])
break;
case 54:
agregarTipoDeclaracion($$[$0-1],$$[$0],"")
break;
case 55: case 56: case 57: case 58: case 59: case 60: case 82:
this.$=$$[$0];
break;
case 61:

                                                    $$[$0-2].push(new Declaracion($$[$0],null,_$[$0].first_line,(_$[$0].first_column+1)));
                                                    this.$ = $$[$0-2];
                                                
break;
case 62:

                                                    $$[$0-4].push(new Declaracion($$[$0-2],$$[$0],_$[$0-2].first_line,(_$[$0-2].first_column+1)));
                                                    this.$ = $$[$0-4];
                                                
break;
case 63:

                                                    this.$ = [new Declaracion($$[$0],null,_$[$0].first_line,(_$[$0].first_column+1))];
                                                
break;
case 64:

                                                    this.$ = [new Declaracion($$[$0-2],$$[$0],_$[$0-2].first_line,(_$[$0-2].first_column+1))];
                                                
break;
case 65:
console.log("+"); this.$ = new Operacion($$[$0-2],$$[$0],0,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 66:
console.log("-"); this.$ = new Operacion($$[$0-2],$$[$0],1,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 67:
console.log("/"); this.$ = new Operacion($$[$0-2],$$[$0],3,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 68:
console.log("^"); this.$ = new Operacion($$[$0-2],$$[$0],5,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 69:
console.log("*"); this.$ = new Operacion($$[$0-2],$$[$0],2,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 70:
console.log("%"); this.$ = new Operacion($$[$0-2],$$[$0],4,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 71:
console.log(">"); this.$ = new Relacional($$[$0-2],$$[$0],3,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 72:
console.log("<"); this.$ = new Relacional($$[$0-2],$$[$0],2,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 73:
console.log(">="); this.$ = new Relacional($$[$0-2],$$[$0],5,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 74:
console.log("<="); this.$ = new Relacional($$[$0-2],$$[$0],4,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 75:
console.log("!="); this.$ = new Relacional($$[$0-2],$$[$0],1,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 76:
console.log("=="); this.$ = new Relacional($$[$0-2],$$[$0],0,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 77:
console.log("~"); this.$ = new Relacional($$[$0-2],$$[$0],6,INCERTEZA_GLOBAL,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 78:
console.log("||"); this.$ = new Logica($$[$0-2],$$[$0],1,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 79:
console.log("|&"); this.$ = new Logica($$[$0-2],$$[$0],2,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 80:
console.log("&&"); this.$ = new Logica($$[$0-2],$$[$0],0,_$[$0-2].first_line, (_$[$0-2].first_column+1));
break;
case 81:
console.log("!"); this.$ = new Logica($$[$0-1],$$[$01],3,_$[$0-1].first_line, (_$[$0-1].first_column+1));
break;
case 83:
this.$=$$[$0-1];
break;
case 84:
this.$=new Literal($$[$0],_$[$0].first_line, (_$[$0].first_column+1),0);
break;
case 85:
this.$=new Literal($$[$0],_$[$0].first_line, (_$[$0].first_column+1),3);
break;
case 86:
this.$=new Literal($$[$0].replace(/\"/g,""),_$[$0].first_line, (_$[$0].first_column+1),2);
break;
case 87:
this.$=new Literal(true,_$[$0].first_line, (_$[$0].first_column+1),1);
break;
case 88:
this.$=new Literal(false,_$[$0].first_line, (_$[$0].first_column+1),1);
break;
case 89:
this.$=new Acceder($$[$0], _$[$0].first_line,(_$[$0].first_column+1));
break;
case 90:
console.log("funcion vacia");
break;
case 91:
console.log("funcion parametros");
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:$V1,11:$V2,13:$V3,15:8,16:10,17:11,18:$V4,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:$V5,49:$V6,58:27,61:$V7,62:$V8,63:$V9,64:$Va},{1:[3]},{5:[1,35]},{2:$V0,7:36,8:37,9:38,10:$V1,11:$V2,13:$V3,15:8,16:10,17:11,18:$V4,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:$V5,49:$V6,58:27,61:$V7,62:$V8,63:$V9,64:$Va},{2:$V0,8:39,11:$V2,15:8,16:10,17:11,18:$V4,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:$V5,49:$V6,58:27,61:$V7,62:$V8,63:$V9,64:$Va},{2:$V0,5:[2,5],11:$V2,15:40,16:10,17:11,18:$V4,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:$V5,49:$V6,58:27,61:$V7,62:$V8,63:$V9,64:$Va},o($Vb,[2,7]),{14:[1,41]},o($Vc,[2,11]),{11:[1,42]},o($Vc,[2,12]),o($Vc,[2,13]),{11:$Vd,19:[1,43]},o($Vc,[2,15]),o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),o($Vc,[2,20]),o($Vc,[2,21]),o($Vc,[2,22]),o($Vc,[2,23]),o($Vc,[2,24]),o($Vc,[2,25]),o($Vc,[2,26]),o($Vc,[2,27]),o($Vc,[2,28]),{11:[1,44],60:45},{11:[1,47],18:$Ve,37:[1,58],38:[1,57],40:[1,56],42:[1,55],45:[1,54],46:[1,53],47:[1,52],48:[1,51],49:$V6,55:[1,49],56:[1,50],57:[1,48],58:46,61:$V7,62:$V8,63:$V9,64:$Va},{50:[1,60]},{11:[2,55]},{11:[2,56]},{11:[2,57]},{11:[2,58]},{11:[2,59]},{1:[2,1]},{2:$V0,8:61,11:$V2,15:8,16:10,17:11,18:$V4,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:$V5,49:$V6,58:27,61:$V7,62:$V8,63:$V9,64:$Va},{2:$V0,5:[2,3],11:$V2,15:40,16:10,17:11,18:$V4,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:$V5,49:$V6,58:27,61:$V7,62:$V8,63:$V9,64:$Va},o($Vb,[2,6]),{2:$V0,5:[2,4],11:$V2,15:40,16:10,17:11,18:$V4,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:$V5,49:$V6,58:27,61:$V7,62:$V8,63:$V9,64:$Va},o($Vc,[2,10]),o([2,11,18,36,49,61,62,63,64],[2,9]),{12:[1,62]},{20:[1,63]},o($Vf,$Vg,{20:[1,64],50:$Vh}),o($Vc,[2,54],{43:$Vi}),{11:[1,68],60:67},{20:[1,70],50:[1,69]},{11:$Vj,14:$Vk,20:$Vl,39:71,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{20:[1,81]},{22:[1,82]},{20:[1,83]},{20:[1,84]},o($Vc,[2,35]),o($Vc,[2,34]),{20:[1,85]},{20:[1,86]},{20:[1,87]},{20:[1,88]},{11:$Vd},{11:$Vj,14:$Vk,20:$Vl,39:89,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{2:$V0,5:[2,2],11:$V2,15:40,16:10,17:11,18:$V4,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:$V5,49:$V6,58:27,61:$V7,62:$V8,63:$V9,64:$Va},o($Vb,[2,8]),{21:[1,90]},{18:$Ve,21:[1,92],49:$V6,58:93,59:91,61:$V7,62:$V8,63:$V9,64:$Va},{11:$Vj,14:$Vk,20:$Vl,39:94,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:[1,95]},o($Vc,[2,53],{43:$Vi}),o($Vf,$Vg,{50:$Vh}),{11:$Vj,14:$Vk,20:$Vl,39:96,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,21:[1,98],39:99,44:97,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vc,[2,42],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),{11:$Vj,14:$Vk,20:$Vl,39:116,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VH,[2,82]),{11:$Vj,14:$Vk,20:$Vl,39:117,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VH,[2,84]),o($VH,[2,85]),o($VH,[2,86]),o($VH,[2,87]),o($VH,[2,88]),o($VH,[2,89],{20:[1,118]}),{11:$Vj,14:$Vk,20:$Vl,39:119,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vc,[2,41]),{49:[1,120]},{11:$Vj,14:$Vk,20:$Vl,39:121,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:122,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{41:[1,123]},{11:$Vj,14:$Vk,20:$Vl,39:124,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:[1,125]},o($Vc,[2,51],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),{22:[1,126]},{21:[1,127],43:[1,128]},{22:[1,129]},{11:[1,130]},o($Vf,[2,64],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),o($Vf,[2,61],{50:[1,131]}),o($Vc,[2,52],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),{21:[1,132],43:$VI},o($Vc,[2,44]),o($VJ,[2,46],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),{11:$Vj,14:$Vk,20:$Vl,39:134,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:135,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:136,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:137,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:138,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:139,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:140,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:141,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:142,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:143,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:144,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:145,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:146,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:147,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:148,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{11:$Vj,14:$Vk,20:$Vl,39:149,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o([2,5,11,18,21,36,43,49,51,61,62,63,64],[2,81],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),{21:[1,150],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG},{11:$Vj,14:$Vk,20:$Vl,21:[1,151],39:99,44:152,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:[1,153],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG},{11:[1,154]},{21:[1,155],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG},{21:[1,157],43:[1,156],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG},{21:[1,158]},{21:[1,159],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG},o($Vc,[2,29]),o($Vc,[2,14]),{22:[1,160]},{18:$Ve,49:$V6,58:161,61:$V7,62:$V8,63:$V9,64:$Va},o($Vc,[2,48]),o($VJ,[2,50]),{11:$Vj,14:$Vk,20:$Vl,39:162,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vc,[2,43]),{11:$Vj,14:$Vk,20:$Vl,39:163,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VH,[2,65]),o($VH,[2,66]),o($VK,[2,67],{65:$Vr,66:$Vs}),o($VL,[2,68],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw}),o($VK,[2,69],{65:$Vr,66:$Vs}),o($VK,[2,70],{65:$Vr,66:$Vs}),o($VL,[2,71],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw}),o($VL,[2,72],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw}),o($VL,[2,73],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw}),o($VL,[2,74],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw}),o($VM,[2,75],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($VM,[2,76],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($VM,[2,77],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o([2,5,11,18,21,36,43,49,51,61,62,63,64,78,79,80],[2,78],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD}),o([2,5,11,18,21,36,43,49,51,61,62,63,64,79,80],[2,79],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o([2,5,11,18,21,36,43,49,51,61,62,63,64,80],[2,80],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF}),o($VH,[2,83]),o($VH,[2,90]),{21:[1,164],43:$VI},{22:[1,165]},{50:[1,166]},{22:[1,167]},{11:$Vj,14:$Vk,20:$Vl,39:99,44:168,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vc,[2,33]),o($Vc,[2,31]),o($Vc,[2,30]),o($Vc,[2,47]),{11:[1,169]},o($Vf,[2,62],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),o($VJ,[2,45],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),o($VH,[2,91]),o($Vc,[2,40]),{11:$Vj,14:$Vk,20:$Vl,39:170,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vc,[2,36]),{21:[1,171],43:$VI},o($VJ,[2,49]),{51:[1,172],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG},o($Vc,[2,32]),{11:$Vj,14:$Vk,20:$Vl,39:173,81:$Vm,82:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{51:[1,174],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG},{52:175,53:[1,176],54:[1,177]},{21:[1,178]},{21:[2,38]},{21:[2,39]},{22:[1,179]},o($Vc,[2,37])],
defaultActions: {30:[2,55],31:[2,56],32:[2,57],33:[2,58],34:[2,59],35:[2,1],59:[2,60],176:[2,38],177:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo insertado
    const {StringBuilder} = require('./../Strings/StringBuilder');
    const {Declaracion} = require('./../Instrucciones/Declaracion.ts');
    const {Funcion} = require('./../Instrucciones/Funcion.ts');
    const {Mientras} = require('./../Instrucciones/Mientras.ts');
    const {Mostrar} = require('./../Instrucciones/Mostrar.ts');
    const {Retornar} = require('./../Instrucciones/Retornar.ts');
    const {Sentencias} = require('./../Instrucciones/Sentencias.ts');
    const {Para} = require('./../Instrucciones/Para.ts');
    const {Si} = require('./../Instrucciones/Si.ts');
    const {Sino} = require('./../Instrucciones/Sino.ts');
    const {Asignacion} = require('./../Instrucciones/Asignacion.ts');
    const {Detener} = require('./../Instrucciones/Detener.ts');
    const {Continuar} = require('./../Instrucciones/Continuar.ts');

    const {Acceder} = require ('./../Expresion/Acceder.ts')
    const {Literal} = require ('./../Expresion/Literal.ts')
    const {Logica} = require ('./../Expresion/Logica.ts')
    const {Operacion} = require ('./../Expresion/Operacion.ts')
    const {Relacional} = require ('./../Expresion/Relacional.ts')




    //const {ConsolaCRLComponent} = require('./../../consola-crl/consola-crl.component.ts');

    let INCERTEZA_GLOBAL = 0.5;
    let RESULT_STRING_LEC = new StringBuilder();
    let INSTRUCCIONES_RECUPERADAS=[];


    function errorAnalisisCodigo(element,er){
        console.log("Error sintactico: "+er+" en la liena: "+element._$.first_line+" ,en la columna: "+(element._$.first_column+1)+" ,Esperados: ");
    }

    function agregarTipoDeclaracion(tipo,elementos,identacion){
        console.log('Tipo: '+tipo);
        console.log('Identacion: '+identacion.length);
        console.log('Elementos: '+elementos);
    }

    function agregarScope2(identacion,instr){
        console.log("Identacion agregar: "+identacion.length);
        console.log("Instraccion: "+instr);
    }
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                        console.log('Identacion');
                        return 36;
                    
break;
case 1:
                        console.log('Salto de linea');
                    
break;
case 2:
                        /*ingnorado*/
                    
break;
case 3:return 83;
break;
case 4:return 14;
break;
case 5:return 84;
break;
case 6:return 12;
break;
case 7:return 69;
break;
case 8:return 67;
break;
case 9:return 70;
break;
case 10:return 68;
break;
case 11:return 51;
break;
case 12:return 22;
break;
case 13:return 43;
break;
case 14:return 53;
break;
case 15:return 54;
break;
case 16:return 66;
break;
case 17:return 65;
break;
case 18:return 74;
break;
case 19:return 73;
break;
case 20:return 76;
break;
case 21:return 75;
break;
case 22:return 78;
break;
case 23:return 79;
break;
case 24:return 80;
break;
case 25:return 81;
break;
case 26:return 72;
break;
case 27:return 71;
break;
case 28:return 50;
break;
case 29:return 77;
break;
case 30:return 20;
break;
case 31:return 21;
break;
case 32:return 63;
break;
case 33:return 64;
break;
case 34:return 61;
break;
case 35:return 49;
break;
case 36:return 62;
break;
case 37:return 18;
break;
case 38:return 85;
break;
case 39:return 86;
break;
case 40:return 55;
break;
case 41:return 56;
break;
case 42:return 48;
break;
case 43:return 47;
break;
case 44:return 46;
break;
case 45:return 45;
break;
case 46:return 57;
break;
case 47:return 42;
break;
case 48:return 10;
break;
case 49:return 13;
break;
case 50:return 40;
break;
case 51:return 38;
break;
case 52:return 37;
break;
case 53:return 19;
break;
case 54:return 11;
break;
case 55:return 5;
break;
case 56:console.log('Se encontro un error lexico:'+ yy_.yytext);
break;
}
},
rules: [/^(?:\t+)/,/^(?:\n)/,/^(?:\s)/,/^(?:[0-9]+)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:("[^"]*"))/,/^(?:\.crl\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:&&)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:\()/,/^(?:\))/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Retorno\b)/,/^(?:Mostrar\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:Principal\b)/,/^(?:(([a-zA-Z_$]([a-zA-Z_$]|[0-9])*)))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador1;
exports.Parser = analizador1.Parser;
exports.parse = function () { return analizador1.parse.apply(analizador1, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}